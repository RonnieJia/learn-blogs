(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{422:function(s,e,n){"use strict";n.r(e);var a=n(2),r=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("RxSwift是Rx的Swift版本，是Swift函数响应式编程的一个开源库。")]),s._v(" "),e("p",[e("img",{attrs:{src:"rxswift01.png",alt:"函数响应式编程"}}),s._v("\n函数响应式编程是通过构建函数操作数据序列，然后对这些序列做出响应的编程方式。它结合了函数式编程以及响应式编程。它的目的是使异步操作、事件和数据流能够更便捷的序列化处理。")]),s._v(" "),e("h3",{attrs:{id:"_1-函数响应式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数响应式编程"}},[s._v("#")]),s._v(" 1. 函数响应式编程")]),s._v(" "),e("h4",{attrs:{id:"函数式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[s._v("#")]),s._v(" 函数式编程")]),s._v(" "),e("p",[s._v("函数式编程是将函数作为参数传递，或者将函数作为返回值。通过组合函数来实现想要的结果。")]),s._v(" "),e("h4",{attrs:{id:"响应式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应式编程"}},[s._v("#")]),s._v(" 响应式编程")]),s._v(" "),e("p",[s._v("响应式编程是使用异步数据流进行编程。任何事物都可以是一个数据流，例如用户输入、按钮的点击事件、网络请求等，监听数据流并做出相应。")]),s._v(" "),e("p",[s._v("在这个基础上，可以用多种函数去组合、创建、过滤这些数据流，这就是函数响应式编程。")]),s._v(" "),e("h3",{attrs:{id:"_2-rxswift简单介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-rxswift简单介绍"}},[s._v("#")]),s._v(" 2. RxSwift简单介绍")]),s._v(" "),e("h4",{attrs:{id:"_1-observable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-observable"}},[s._v("#")]),s._v(" 1.Observable")]),s._v(" "),e("p",[s._v("Observable指的是可被观察者或者事件源。Observable是一种像信号一样的序列，可以理解为一串数组，但是需要有观察者监听这些信号。\nRxSwift框架已经创建好了很多常用的序列，例如UIButton的点击事件，UITextField的文本发生变化等等。我们还可以自定义序列。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let numbers: Observable<Int> = Observable.create { observer -> Disposable in\n    observer.onNext(0)\n    observer.onNext(1)\n    observer.onNext(2)\n    observer.onNext(3)\n    observer.onNext(4)\n    observer.onNext(5)\n    observer.onNext(6)\n    observer.onNext(7)\n    observer.onNext(8)\n    observer.onNext(9)\n    observer.onCompleted()\n    \n    return Disposables.create()\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("其中，next事件表示发送新的数据，complete事件表示发送完成，error表示出现异常。")]),s._v(" "),e("p",[s._v("Single  它只能发出一个元素，或者是一个 error 事件。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('func getRepo(_ repo: String) -> Single<[String: Any]> {\n\n    return Single<[String: Any]>.create { single in\n        let url = URL(string: "https://api.github.com/repos/\\(repo)")!\n        let task = URLSession.shared.dataTask(with: url) {\n            data, _, error in\n\n            if let error = error {\n                single(.error(error))\n                return\n            }\n\n            guard let data = data,\n                  let json = try? JSONSerialization.jsonObject(with: data, options: .mutableLeaves),\n                  let result = json as? [String: Any] else {\n                single(.error(DataError.cantParseJSON))\n                return\n            }\n\n            single(.success(result))\n        }\n\n        task.resume()\n\n        return Disposables.create { task.cancel() }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("Completable 它只能产生一个 completed 事件，或者产生一个 error 事件。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("func cacheLocally() -> Completable {\n    return Completable.create { completable in\n       // Store some data locally\n       ...\n       ...\n\n       guard success else {\n           completable(.error(CacheError.failedCaching))\n           return Disposables.create {}\n       }\n\n       completable(.completed)\n       return Disposables.create {}\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("Maybe 它介于 Single 和 Completable 之间，它要么只能发出一个元素，要么产生一个 completed 事件，要么产生一个 error 事件。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('func generateString() -> Maybe<String> {\n    return Maybe<String>.create { maybe in\n        maybe(.success("RxSwift"))\n\n        // OR\n\n        maybe(.completed)\n\n        // OR\n\n        maybe(.error(error))\n\n        return Disposables.create {}\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("Driver 它主要是为了简化 UI 层的代码。如果有1.不会产生 error 事件，2.一定在 MainScheduler 监听（主线程监听）3.共享附加作用这些特征也可以使用Driver。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('let results = query.rx.text\n    .throttle(0.3, scheduler: MainScheduler.instance)\n    .flatMapLatest { query in\n        fetchAutoCompleteItems(query)\n    }\n\nresults\n    .map { "\\($0.count)" }\n    .bind(to: resultCount.rx.text)\n    .disposed(by: disposeBag)\n\nresults\n    .bind(to: resultsTableView.rx.items(cellIdentifier: "Cell")) {\n      (_, result, cell) in\n        cell.textLabel?.text = "\\(result)"\n    }\n    .disposed(by: disposeBag)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("Signal 类似于Driver，唯一的区别是，Driver 会对新观察者重新发送上一个元素，而 Signal 不会对新观察者发送。")]),s._v(" "),e("p",[s._v("ControlEvent 专门用于描述 UI 控件所产生的事件，它有1.不会产生error事件，2.一定在 MainScheduler 订阅（主线程订阅）,3.一定在 MainScheduler 监听（主线程监听）4.共享附加作用 这些特征。")]),s._v(" "),e("h4",{attrs:{id:"_2-observer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-observer"}},[s._v("#")]),s._v(" 2.Observer")]),s._v(" "),e("p",[s._v("观察者对象，用来监听事件并做出响应，观察者需要订阅Observable，才能受到其发出的事件。\n例如上面的Observable发送了10个数字，可以创建一个Observer，监听并打印收到的数据")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('numbers.subscribe(onNext: { number in\n    print(number)\n}, onError: { error in\n    print("error： \\(error.localizedDescription)")\n}, onCompleted: {\n    print("completed")\n})\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("AnyObserver 可以用来描叙任意一种观察者。")]),s._v(" "),e("p",[s._v("Binder 主要有以下两个特征：1.不会处理错误事件，2.确保绑定都是在给定 Scheduler 上执行（默认 MainScheduler）")]),s._v(" "),e("h4",{attrs:{id:"_3-operator-操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-operator-操作符"}},[s._v("#")]),s._v(" 3.Operator - 操作符")]),s._v(" "),e("p",[s._v("操作符可以帮助大家创建新的序列，或者变化组合原有的序列，从而生成一个新的序列。\n例如通过fliter操作符来过滤一个数组序列中大于10的数据")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let disposeBag = DisposeBag()\n\nObservable.of(1, 5, 10, 15, 20, 25)\n          .filter { $0 > 10 }\n          .subscribe(onNext: { print($0) })\n          .disposed(by: disposeBag)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("输出结果")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("15\n20\n25\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("总结：RxSwift 归根结底还是观察者模式。用户输入、点击事件、定时器、网络请求等都可以当成 Observable（被观察者），Observer（观察者）总会在 Observable 处注册一个订阅，当事件发生时，Observable 找到所有的订阅并通知观察者。")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://beeth0ven.github.io/RxSwift-Chinese-Documentation/",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考：《RxSwift: ReactiveX for Swift 》"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);